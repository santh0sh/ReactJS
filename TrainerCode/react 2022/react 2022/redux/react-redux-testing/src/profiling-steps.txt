To measure performance and identify performance bottlenecks 
in your app, inspect how long it took  app’s components to render, 
and why they were rendered using PROFILER.

With the Profiler, you can:
•	Collect timing information about each component
•	Easily identify performance bottlenecks
•	Be sure to have a tool compatible with concurrent rendering

Run the application and open Chrome Debugger (RC-inspect)

Click React chrome Devtools extension tab.

click Profiler.


The Profiler works by recording a session of actual usage
 of application. 

In this recording session it gathers information 
about the components in your application and 
displays some interesting information to exploit and
 find performance bottlenecks.

Click on Record circle and click clap button 3 times
 and stop recording.

React does work in 2 phases. 
1. The render phase where components are rendered 
   and the virtual DOM diffed,
2. commit phase where actual changes in the virtual DOM 
   are committed to the  DOM.

The graphical representation on the far right of the profiler 
represents the number of commits that were made 
to the DOM during interaction with the app

The taller the bar is, the longer it took React to 
render the components in this commit.  (eg. Provider    )

The Flame Chart.
After a successful recording session,couple of  different 
bits of information about  components.

We have 3 tabs representing different groups of information — 
each relating to the selected commit on the right.

A yellow bar means the component took the 
most time to render in this commit.

The ranked chart displays every component that was rendered 
in the commit being viewed. It displays this components ranked 
from top to bottom —  with component which took more time to 
render at the top.

Tracing:

Interactions let  tag actions performed during a recording session
 with a string identifier so they can be monitored and tracked within 
 the profiling results.

The API for this is unstable, but here’s how to enable interactions 
in your profiling results.

First install the scheduler module. 

From your terminal, run 
$ yarn add scheduler 
.
Once the installation is done, use unstable_trace function 
exported by the module as shown below:

import { unstable_trace as trace } from 'scheduler/tracing'


The trace function has a signature similar to this:

trace("string identifier", timestamp, () = {})

It takes a string identifier, timestamp and a callback function. 

Track whatever interaction we want by passing it into the callback.

For example, I have gone ahead to do this in the fake-medium application:
// before _handleClick () {   // do something}
// after _handleClick () {   trace("Clap was clicked!", window.performace.now(), () => {  	  // do something   })}

The medium clap when clicked calls the _handleClick method. 
Now, I’ve wrapped the functionality within the trace method.

Clicking three times now records 3 interactions and you can 
click on any of the interactions to view more details about them.

Oberve 3 times, Clap was clicked!


